# bot.py
import logging
import sqlite3
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram import Update
import ccxt
import os
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TELEGRAM_TOKEN")
THRESHOLD = 1.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ %
symbols = ['BTC/USDT', 'ETH/USDT']

# –ë–∏—Ä–∂–∏
exchanges = {
    'binance': ccxt.binance(),
    'bybit': ccxt.bybit(),
    'kucoin': ccxt.kucoin()
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def init_db():
    conn = sqlite3.connect('/tmp/users.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            is_premium INTEGER DEFAULT 0,
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def add_user(user_id, username):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
    conn.commit()
    conn.close()

def is_premium(user_id):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT is_premium FROM users WHERE user_id = ?', (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else False

def set_premium(user_id):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('UPDATE users SET is_premium = 1 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ê–õ–ï–†–¢–û–í ===
scheduler = AsyncIOScheduler()

async def check_arbitrage(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.user_id
    if not is_premium(user_id):
        return  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—É—á–∞—é—Ç –∞–ª–µ—Ä—Ç—ã (Free ‚Äî –Ω–µ –ø–æ–ª—É—á–∞—é—Ç –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ)

    for symbol in symbols:
        prices = {}
        for name, exchange in exchanges.items():
            try:
                ticker = exchange.fetch_ticker(symbol)
                prices[name] = ticker['last']
            except Exception as e:
                logger.error(f"{name}: {e}")

        if len(prices) < 2:
            continue

        min_price = min(prices.values())
        max_price = max(prices.values())
        spread = (max_price - min_price) / min_price * 100

        if spread > THRESHOLD:
            min_ex = [k for k, v in prices.items() if v == min_price][0]
            max_ex = [k for k, v in prices.items() if v == max_price][0]

            message = f"""
üö® **–ê–†–ë–ò–¢–†–ê–ñ** ({symbol})
üìâ {min_ex}: ${min_price:,.2f}
üìà {max_ex}: ${max_price:,.2f}
üìä –†–∞–∑–Ω–∏—Ü–∞: **{spread:.2f}%**
üîó [Buy on {min_ex}]({exchanges[min_ex].urls['www']})
            """
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                scheduler.remove_job(f"job_{user_id}")

# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context):
    user = update.effective_user
    add_user(user.id, user.username)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø ‚Äî **ArbHunterBot**. –°–ª–µ–∂—É –∑–∞ —Ü–µ–Ω–∞–º–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –ø—Ä–∏—Å—ã–ª–∞—é —Å–∏–≥–Ω–∞–ª—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.\n\n"
        "üîπ /prices ‚Äî —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã\n"
        "üî∏ /subscribe ‚Äî –∫–∞–∫ —Å—Ç–∞—Ç—å Premium\n"
        "üíé /premium ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Premium (–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
    )

async def prices(update: Update, context):
    user_id = update.effective_user.id
    reply = "üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:\n\n"
    for symbol in symbols:
        reply += f"**{symbol}**\n"
        for name, exchange in exchanges.items():
            try:
                price = exchange.fetch_ticker(symbol)['last']
                reply += f"  {name}: ${price:,.2f}\n"
            except:
                reply += f"  {name}: –æ—à–∏–±–∫–∞\n"
        reply += "\n"
    await update.message.reply_text(reply, parse_mode='Markdown')

async def subscribe(update: Update, context):
    text = """
üíé **Premium –ø–æ–¥–ø–∏—Å–∫–∞** ‚Äî $9.99/–º–µ—Å

‚úÖ –ê–ª–µ—Ä—Ç—ã –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥  
‚úÖ –í—Å–µ –º–æ–Ω–µ—Ç—ã –∏ –±–∏—Ä–∂–∏  
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞  
‚úÖ API –¥–æ—Å—Ç—É–ø (—Å–∫–æ—Ä–æ)

üëâ –ü–æ–∫–∞ —á—Ç–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ **–±–µ—Å–ø–ª–∞—Ç–Ω–∞** —á–µ—Ä–µ–∑ /premium
    """
    await update.message.reply_text(text, parse_mode='Markdown')

async def premium(update: Update, context):
    user_id = update.effective_user.id
    set_premium(user_id)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    job_name = f"job_{user_id}"
    if context.job_queue.get_jobs_by_name(job_name):
        for job in context.job_queue.get_jobs_by_name(job_name):
            job.schedule_removal()

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 15 —Å–µ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è Premium)
    context.job_queue.run_repeating(
        check_arbitrage,
        interval=15,
        first=10,
        name=job_name,
        user_id=user_id
    )

    await update.message.reply_text(
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã ‚Äî **Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**!\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∞–ª–µ—Ä—Ç—ã –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /stop"
    )

async def stop(update: Update, context):
    user_id = update.effective_user.id
    job_name = f"job_{user_id}"
    jobs = context.job_queue.get_jobs_by_name(job_name)
    for job in jobs:
        job.schedule_removal()
    await update.message.reply_text("üõë –ê–ª–µ—Ä—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# === –ó–ê–ü–£–°–ö ===
def main():
    init_db()

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("prices", prices))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("premium", premium))
    app.add_handler(CommandHandler("stop", stop))

    scheduler.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")

    app.run_polling()

if __name__ == '__main__':
    main()
